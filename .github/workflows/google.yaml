# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [gke]
  pull_request:
    branches: [gke]

env:
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  DOCKER_REPO: docker-repo
  GRPC_SERVER_IMAGE: grpc-server
  GRPC_GATEWAY_IMAGE: grpc-gateway
  USE_GKE_GCLOUD_AUTH_PLUGIN: True

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: "write"
      id-token: "write"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install OpenAPI Tools
        run: npm install -g @openapitools/openapi-generator-cli

      - name: Check for proto file changes
        id: check_files
        run: |
          CHANGED_PROTOS=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^proto/.*\.proto$' || true)
          if [ -n "$CHANGED_PROTOS" ]; then
            echo "proto_changed=true" >> $GITHUB_ENV
            echo "changed_files=$CHANGED_PROTOS" >> $GITHUB_ENV
          fi

      - name: Debug Check Files Output
        run: |
          echo "proto_changed=${{ env.proto_changed }}"
          echo "changed_files=${{ env.changed_files }}"

      - name: Generate OpenAPI Spec
        if: env.proto_changed == 'true'
        run: |
          # Install protoc
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

          # Install go
          sudo apt-get install -y golang-go

          # Set GOPATH
          echo "GOPATH=$HOME/go" >> $GITHUB_ENV
          echo "$HOME/go/bin" >> $GITHUB_PATH

          # Install protoc-gen-openapiv2
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest
          export PATH=$PATH:$HOME/go/bin

          # Download necessary Google API proto files
          mkdir -p google/api
          curl -sSL https://raw.githubusercontent.com/googleapis/googleapis/master/google/api/annotations.proto > google/api/annotations.proto
          curl -sSL https://raw.githubusercontent.com/googleapis/googleapis/master/google/api/http.proto > google/api/http.proto

          mkdir -p gen
          for proto in ${{ env.changed_files }}; do
            filename=$(basename "$proto" .proto)
            # Generate OpenAPI spec from Proto file
            protoc -I. \
              -I$GOPATH/pkg/mod \
              -I$GOPATH/pkg/mod/github.com/grpc-ecosystem/grpc-gateway@v2.20.0+incompatible \
              -I$GOPATH/pkg/mod/github.com/grpc-ecosystem/grpc-gateway@v2.20.0+incompatible/third_party/googleapis \
              --openapiv2_out=./gen \
              --openapiv2_opt=logtostderr=true \
              "$proto"

            if [ -f "./gen/${filename}.json" ]; then
              # Now use openapi-generator-cli with the generated OpenAPI spec
              openapi-generator-cli generate \
                -i ./gen/${filename}.json \
                -g openapi \
                -o ./gen/${filename}
              
              mv ./gen/${filename}/openapi.json ./gen/${filename}.swagger.json
              rm -rf ./gen/${filename}
            else
              echo "Failed to generate ./gen/${filename}.json"
              exit 1
            fi
          done

      - name: Commit and push OpenAPI specs
        if: env.proto_changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add gen/*.swagger.json
          git commit -m "Update OpenAPI json file" || echo "No changes to commit"
          git push

      - name: Authenticate to Google Cloud
        uses: "google-github-actions/auth@v1"
        with:
          workload_identity_provider: "projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider"
          service_account: "${{ secrets.GCP_SA_EMAIL }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker
        run: gcloud auth configure-docker asia-northeast1-docker.pkg.dev

      - name: Build and Push gRPC Server Image
        run: |
          docker build -t asia-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/$DOCKER_REPO/$GRPC_SERVER_IMAGE:latest -f ./cmd/grpc-server/Dockerfile .
          docker push asia-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/$DOCKER_REPO/$GRPC_SERVER_IMAGE:latest

      - name: Build and Push gRPC Gateway Image
        run: |
          docker build -t asia-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/$DOCKER_REPO/$GRPC_GATEWAY_IMAGE:latest -f ./cmd/gateway/Dockerfile .
          docker push asia-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/$DOCKER_REPO/$GRPC_GATEWAY_IMAGE:latest

      ## gke-gcloud-auth-pluginをインストール
      - name: Install GKE Auth Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: Get GKE Credentials
        run: gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project ${{ secrets.GCP_PROJECT_ID }}

      ## デバッグ用
      - name: Check gcloud version
        run: gcloud version

      - name: Check kubectl version
        run: kubectl version --client

      - name: Deploy to GKE
        run: |
          kubectl rollout restart deployment grpc-server
          kubectl rollout restart deployment grpc-gateway

      - name: Verify deployments
        run: |
          kubectl rollout status deployment/grpc-server
          kubectl rollout status deployment/grpc-gateway
